// Code generated by ent, DO NOT EDIT.

package ent

import (
	"simple-bank/ent/account"
	"simple-bank/ent/entry"
	"simple-bank/ent/schema"
	"simple-bank/ent/transfer"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescCreatedAt is the schema descriptor for created_at field.
	accountDescCreatedAt := accountFields[5].Descriptor()
	// account.DefaultCreatedAt holds the default value on creation for the created_at field.
	account.DefaultCreatedAt = accountDescCreatedAt.Default.(time.Time)
	// accountDescID is the schema descriptor for id field.
	accountDescID := accountFields[0].Descriptor()
	// account.DefaultID holds the default value on creation for the id field.
	account.DefaultID = accountDescID.Default.(func() uuid.UUID)
	entryFields := schema.Entry{}.Fields()
	_ = entryFields
	// entryDescCreatedAt is the schema descriptor for created_at field.
	entryDescCreatedAt := entryFields[3].Descriptor()
	// entry.DefaultCreatedAt holds the default value on creation for the created_at field.
	entry.DefaultCreatedAt = entryDescCreatedAt.Default.(time.Time)
	// entryDescID is the schema descriptor for id field.
	entryDescID := entryFields[0].Descriptor()
	// entry.DefaultID holds the default value on creation for the id field.
	entry.DefaultID = entryDescID.Default.(func() uuid.UUID)
	transferFields := schema.Transfer{}.Fields()
	_ = transferFields
	// transferDescID is the schema descriptor for id field.
	transferDescID := transferFields[0].Descriptor()
	// transfer.DefaultID holds the default value on creation for the id field.
	transfer.DefaultID = transferDescID.Default.(func() uuid.UUID)
}
