// Code generated by ent, DO NOT EDIT.

package transfer

import (
	"simple-bank/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(sql.FieldLTE(FieldID, id))
}

// FromAccountID applies equality check predicate on the "from_account_id" field. It's identical to FromAccountIDEQ.
func FromAccountID(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldFromAccountID, v))
}

// ToAccountID applies equality check predicate on the "to_account_id" field. It's identical to ToAccountIDEQ.
func ToAccountID(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldToAccountID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldCreatedAt, v))
}

// FromAccountIDEQ applies the EQ predicate on the "from_account_id" field.
func FromAccountIDEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldFromAccountID, v))
}

// FromAccountIDNEQ applies the NEQ predicate on the "from_account_id" field.
func FromAccountIDNEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNEQ(FieldFromAccountID, v))
}

// FromAccountIDIn applies the In predicate on the "from_account_id" field.
func FromAccountIDIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldIn(FieldFromAccountID, vs...))
}

// FromAccountIDNotIn applies the NotIn predicate on the "from_account_id" field.
func FromAccountIDNotIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNotIn(FieldFromAccountID, vs...))
}

// FromAccountIDGT applies the GT predicate on the "from_account_id" field.
func FromAccountIDGT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGT(FieldFromAccountID, v))
}

// FromAccountIDGTE applies the GTE predicate on the "from_account_id" field.
func FromAccountIDGTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGTE(FieldFromAccountID, v))
}

// FromAccountIDLT applies the LT predicate on the "from_account_id" field.
func FromAccountIDLT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLT(FieldFromAccountID, v))
}

// FromAccountIDLTE applies the LTE predicate on the "from_account_id" field.
func FromAccountIDLTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLTE(FieldFromAccountID, v))
}

// ToAccountIDEQ applies the EQ predicate on the "to_account_id" field.
func ToAccountIDEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldToAccountID, v))
}

// ToAccountIDNEQ applies the NEQ predicate on the "to_account_id" field.
func ToAccountIDNEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNEQ(FieldToAccountID, v))
}

// ToAccountIDIn applies the In predicate on the "to_account_id" field.
func ToAccountIDIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldIn(FieldToAccountID, vs...))
}

// ToAccountIDNotIn applies the NotIn predicate on the "to_account_id" field.
func ToAccountIDNotIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNotIn(FieldToAccountID, vs...))
}

// ToAccountIDGT applies the GT predicate on the "to_account_id" field.
func ToAccountIDGT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGT(FieldToAccountID, v))
}

// ToAccountIDGTE applies the GTE predicate on the "to_account_id" field.
func ToAccountIDGTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGTE(FieldToAccountID, v))
}

// ToAccountIDLT applies the LT predicate on the "to_account_id" field.
func ToAccountIDLT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLT(FieldToAccountID, v))
}

// ToAccountIDLTE applies the LTE predicate on the "to_account_id" field.
func ToAccountIDLTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLTE(FieldToAccountID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int32) predicate.Transfer {
	return predicate.Transfer(sql.FieldLTE(FieldAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		p(s.Not())
	})
}
