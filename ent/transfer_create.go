// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"simple-bank/ent/transfer"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
}

// SetFromAccountID sets the "from_account_id" field.
func (tc *TransferCreate) SetFromAccountID(i int32) *TransferCreate {
	tc.mutation.SetFromAccountID(i)
	return tc
}

// SetToAccountID sets the "to_account_id" field.
func (tc *TransferCreate) SetToAccountID(i int32) *TransferCreate {
	tc.mutation.SetToAccountID(i)
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransferCreate) SetAmount(i int32) *TransferCreate {
	tc.mutation.SetAmount(i)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransferCreate) SetCreatedAt(t time.Time) *TransferCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetID sets the "id" field.
func (tc *TransferCreate) SetID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// Mutation returns the TransferMutation object of the builder.
func (tc *TransferCreate) Mutation() *TransferMutation {
	return tc.mutation
}

// Save creates the Transfer in the database.
func (tc *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := transfer.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferCreate) check() error {
	if _, ok := tc.mutation.FromAccountID(); !ok {
		return &ValidationError{Name: "from_account_id", err: errors.New(`ent: missing required field "Transfer.from_account_id"`)}
	}
	if _, ok := tc.mutation.ToAccountID(); !ok {
		return &ValidationError{Name: "to_account_id", err: errors.New(`ent: missing required field "Transfer.to_account_id"`)}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transfer.amount"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transfer.created_at"`)}
	}
	return nil
}

func (tc *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transfer.Table, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.FromAccountID(); ok {
		_spec.SetField(transfer.FieldFromAccountID, field.TypeInt32, value)
		_node.FromAccountID = value
	}
	if value, ok := tc.mutation.ToAccountID(); ok {
		_spec.SetField(transfer.FieldToAccountID, field.TypeInt32, value)
		_node.ToAccountID = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeInt32, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	builders []*TransferCreate
}

// Save creates the Transfer entities in the database.
func (tcb *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
