// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"simple-bank/ent/predicate"
	"simple-bank/ent/transfer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks    []Hook
	mutation *TransferMutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (tu *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFromAccountID sets the "from_account_id" field.
func (tu *TransferUpdate) SetFromAccountID(i int32) *TransferUpdate {
	tu.mutation.ResetFromAccountID()
	tu.mutation.SetFromAccountID(i)
	return tu
}

// AddFromAccountID adds i to the "from_account_id" field.
func (tu *TransferUpdate) AddFromAccountID(i int32) *TransferUpdate {
	tu.mutation.AddFromAccountID(i)
	return tu
}

// SetToAccountID sets the "to_account_id" field.
func (tu *TransferUpdate) SetToAccountID(i int32) *TransferUpdate {
	tu.mutation.ResetToAccountID()
	tu.mutation.SetToAccountID(i)
	return tu
}

// AddToAccountID adds i to the "to_account_id" field.
func (tu *TransferUpdate) AddToAccountID(i int32) *TransferUpdate {
	tu.mutation.AddToAccountID(i)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransferUpdate) SetAmount(i int32) *TransferUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TransferUpdate) AddAmount(i int32) *TransferUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransferUpdate) SetCreatedAt(t time.Time) *TransferUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// Mutation returns the TransferMutation object of the builder.
func (tu *TransferUpdate) Mutation() *TransferMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FromAccountID(); ok {
		_spec.SetField(transfer.FieldFromAccountID, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedFromAccountID(); ok {
		_spec.AddField(transfer.FieldFromAccountID, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.ToAccountID(); ok {
		_spec.SetField(transfer.FieldToAccountID, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedToAccountID(); ok {
		_spec.AddField(transfer.FieldToAccountID, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferMutation
}

// SetFromAccountID sets the "from_account_id" field.
func (tuo *TransferUpdateOne) SetFromAccountID(i int32) *TransferUpdateOne {
	tuo.mutation.ResetFromAccountID()
	tuo.mutation.SetFromAccountID(i)
	return tuo
}

// AddFromAccountID adds i to the "from_account_id" field.
func (tuo *TransferUpdateOne) AddFromAccountID(i int32) *TransferUpdateOne {
	tuo.mutation.AddFromAccountID(i)
	return tuo
}

// SetToAccountID sets the "to_account_id" field.
func (tuo *TransferUpdateOne) SetToAccountID(i int32) *TransferUpdateOne {
	tuo.mutation.ResetToAccountID()
	tuo.mutation.SetToAccountID(i)
	return tuo
}

// AddToAccountID adds i to the "to_account_id" field.
func (tuo *TransferUpdateOne) AddToAccountID(i int32) *TransferUpdateOne {
	tuo.mutation.AddToAccountID(i)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransferUpdateOne) SetAmount(i int32) *TransferUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TransferUpdateOne) AddAmount(i int32) *TransferUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransferUpdateOne) SetCreatedAt(t time.Time) *TransferUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// Mutation returns the TransferMutation object of the builder.
func (tuo *TransferUpdateOne) Mutation() *TransferMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (tuo *TransferUpdateOne) Where(ps ...predicate.Transfer) *TransferUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfer entity.
func (tuo *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FromAccountID(); ok {
		_spec.SetField(transfer.FieldFromAccountID, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedFromAccountID(); ok {
		_spec.AddField(transfer.FieldFromAccountID, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.ToAccountID(); ok {
		_spec.SetField(transfer.FieldToAccountID, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedToAccountID(); ok {
		_spec.AddField(transfer.FieldToAccountID, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Transfer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
